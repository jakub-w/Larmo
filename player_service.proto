// Copyright (C) 2019 by Jakub Wojciech

// This file is part of Lelo Remote Music Player.

// Lelo Remote Music Player is free software: you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation, either version 3 of
// the License, or (at your option) any later version.

// Lelo Remote Music Player is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Lelo Remote Music Player. If not, see
// <https://www.gnu.org/licenses/>.

syntax = "proto3";

message VolumeMessage {
  string volume = 1;
}

message SeekMessage {
  sint32 seconds = 1;
}

message MpvResponse {
  sint32 response = 1;
}

message TimeInterval {
  uint32 milliseconds = 1;
}

message SongMetadata {
  string title = 1;
  string album = 2;
  string artist = 3;
}

message TimeInfo {
  double total_time = 1;
  double current_time = 2;
  double remaining_time = 3;
  double remaining_playtime = 4;
  int32 volume = 5;

  enum PlaybackState {
    NOT_CHANGED = 0;
    PLAYING = 1;
    PAUSED = 2;
    STOPPED = 3;
    FINISHED = 4;
    FINISHED_ERROR = 5;
  }
  PlaybackState playback_state = 6;
}

message ZkpMessage {
  string user_id = 1;
  bytes V = 2;
  bytes r = 3;
}

message AuthData {
  bytes data = 1;
  ZkpMessage zkp = 4;
  bytes public_key = 3;
  bool denied = 2;
}

message AudioData {
  bytes data = 1;
}

message Empty {}

service PlayerService {
  rpc Stop(Empty) returns (MpvResponse) {}
  rpc TogglePause(Empty) returns (MpvResponse) {}
  rpc Volume(VolumeMessage) returns (MpvResponse) {}
  rpc Seek(SeekMessage) returns (MpvResponse) {}
  rpc Ping(Empty) returns (Empty) {}
  rpc TimeInfoStream(stream TimeInterval) returns (stream TimeInfo) {}
  rpc Authenticate(stream AuthData) returns (stream AuthData) {}
  rpc AudioStream(stream AudioData) returns (MpvResponse) {}
}
