#+TITLE: Larmo

# TODO: Revise the whole README after implementing automatic certificate
#       distribution

Larmo is a command line music player that streams audio files to the server to play them remotely.

* How it works

** Server
The server needs to start ~remote-player~ executable. It will wait for connections from clients to do their bidding.

There is an authentication system in place based on SSL/TLS so all communication is encrypted.

** Client
First command on the client's system should be:
#+BEGIN_SRC sh
  remote-control daemon
#+END_SRC
It will create a daemon in the background that will work as a proxy between the server and the command line utility.

When the daemon is running you can, for example, use:
#+BEGIN_SRC sh
  remote-control play /path/to/file.mp3
#+END_SRC

You can check the available commands with:
#+BEGIN_SRC sh
  remote-control --help
#+END_SRC

** Configuration
Both the server and the client can read all necessary settings from the configuration file. For example:
#+BEGIN_SRC conf
  passphrase = my_pass
  grpc_port = 5345
  grpc_host = my_hostname
  cert_file = /path/to/server.crt
#+END_SRC

For now, by default it searches the working directory for the configuration file: ~lrm.conf~, although it can be selected by:
#+BEGIN_SRC sh
  remote-player --config=/path/to/my_lrm_config.conf
#+END_SRC
** Certificate and private key
The certificate needs to be generated in place with the CN being the hostname that client will use to connect to the server.

# TODO: Revise this after adding more options to remote-player command
The server needs to have a private key that signed the certificate. It will expect to have the key file in the working dir, named ~server.key~. For now there is no option to configure it.

* Dependencies
- mpv
- grpc
- asio
** For building
- gcc or clang :: the version must support c++17
- meson
* Building
#+BEGIN_SRC sh
  meson builddir && cd builddir && ninja
#+END_SRC
